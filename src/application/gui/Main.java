/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application.gui;

import application.Graphe;
import application.MyGraphScene;
import application.Transport;
import java.awt.BorderLayout;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.visual.anchor.AnchorFactory;
import org.netbeans.api.visual.anchor.AnchorShape;
import org.netbeans.api.visual.widget.ConnectionWidget;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Widget;

/**
 *
 * @author TOAVINA
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setLocationRelativeTo(null);        
        about = new AboutDialog(this, true);
        help = new HelpDialog(this, true);
        algo = new AlgoDialog(this, true);
        resultDialog = new ResultDialog(this, false);
        chooser = new JFileChooser(new File("."));
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        reloadjTables();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        algoLabel = new javax.swing.JLabel();
        algoComboBox = new javax.swing.JComboBox();
        solutionBaseToogleBtn = new javax.swing.JToggleButton();
        steppingStoneToogleBtn = new javax.swing.JToggleButton();
        previewBtn = new javax.swing.JButton();
        verticalSplitPane = new javax.swing.JSplitPane();
        horizontalSplitPane = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        effacerButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        consolScrollPane = new javax.swing.JScrollPane();
        consolTextArea = new javax.swing.JTextArea();
        graphScrollPane = new javax.swing.JScrollPane();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        fileSeparator = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editjMenu = new javax.swing.JMenu();
        algoMenu = new javax.swing.JMenu();
        balasRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        coinRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        miniliRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        minicoRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        minitabRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        animationMenu = new javax.swing.JMenu();
        veryRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        fastRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        mediumRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        slowRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 600));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setPreferredSize(new java.awt.Dimension(166, 50));

        algoLabel.setText("Algorithme : ");
        toolBar.add(algoLabel);

        algoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Balas Hammer", "Coin Nord-Ouest", "MINILI", "MINICO", "MINITAB" }));
        algoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algoComboBoxActionPerformed(evt);
            }
        });
        toolBar.add(algoComboBox);

        solutionBaseToogleBtn.setText("Solution de Base");
        solutionBaseToogleBtn.setFocusable(false);
        solutionBaseToogleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        solutionBaseToogleBtn.setMaximumSize(new java.awt.Dimension(120, 57));
        solutionBaseToogleBtn.setMinimumSize(new java.awt.Dimension(150, 21));
        solutionBaseToogleBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        solutionBaseToogleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solutionBaseToogleBtnActionPerformed(evt);
            }
        });
        toolBar.add(solutionBaseToogleBtn);

        steppingStoneToogleBtn.setText("Solution optimale");
        steppingStoneToogleBtn.setFocusable(false);
        steppingStoneToogleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        steppingStoneToogleBtn.setMaximumSize(new java.awt.Dimension(120, 57));
        steppingStoneToogleBtn.setMinimumSize(new java.awt.Dimension(150, 21));
        steppingStoneToogleBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        steppingStoneToogleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                steppingStoneToogleBtnActionPerformed(evt);
            }
        });
        toolBar.add(steppingStoneToogleBtn);

        previewBtn.setText("Aper√ßu");
        previewBtn.setFocusable(false);
        previewBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        previewBtn.setMaximumSize(new java.awt.Dimension(100, 57));
        previewBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        previewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewBtnActionPerformed(evt);
            }
        });
        toolBar.add(previewBtn);

        verticalSplitPane.setDividerLocation(400);

        horizontalSplitPane.setDividerLocation(260);
        horizontalSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setBackground(new java.awt.Color(51, 204, 255));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nb disponible :");

        jSpinner2.setValue(2);
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nb besoin :");

        jSpinner1.setValue(2);
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        effacerButton.setText("Effacer");
        effacerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effacerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(effacerButton)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(effacerButton))
                .addContainerGap())
        );

        jPanel3.setLayout(new java.awt.GridLayout(1, 2, 10, 10));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tableau des co√ªts unitaires de transport"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"X0", null, null, null},
                {"X1", null, null, null},
                {"Besoins", null, null, null}
            },
            new String [] {
                "", "Y0", "Y1", "Disponibles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setRowHeight(25);
        jTable1.setRowSelectionAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel3.add(jScrollPane2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Quantit√©s effectivement transport√©es"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"X0", null, null},
                {"X1", null, null}
            },
            new String [] {
                "", "Y0", "Y1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.setRowHeight(25);
        jTable2.setRowSelectionAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(40);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(40);
        }

        jPanel3.add(jScrollPane3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );

        horizontalSplitPane.setTopComponent(jPanel1);

        consolTextArea.setEditable(false);
        consolTextArea.setColumns(20);
        consolTextArea.setRows(5);
        consolScrollPane.setViewportView(consolTextArea);

        horizontalSplitPane.setRightComponent(consolScrollPane);

        verticalSplitPane.setLeftComponent(horizontalSplitPane);
        verticalSplitPane.setRightComponent(graphScrollPane);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);
        fileMenu.add(fileSeparator);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        editjMenu.setText("Edit");

        algoMenu.setText("Algorithms");

        balasRadioButtonMenuItem.setText("Balas Hammer");
        balasRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balasRadioButtonMenuItemActionPerformed(evt);
            }
        });
        algoMenu.add(balasRadioButtonMenuItem);

        coinRadioButtonMenuItem.setText("Coin Nord-Ouest");
        coinRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coinRadioButtonMenuItemActionPerformed(evt);
            }
        });
        algoMenu.add(coinRadioButtonMenuItem);

        miniliRadioButtonMenuItem.setText("MINILI");
        miniliRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miniliRadioButtonMenuItemActionPerformed(evt);
            }
        });
        algoMenu.add(miniliRadioButtonMenuItem);

        minicoRadioButtonMenuItem.setText("MINICO");
        minicoRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minicoRadioButtonMenuItemActionPerformed(evt);
            }
        });
        algoMenu.add(minicoRadioButtonMenuItem);

        minitabRadioButtonMenuItem.setText("MINITAB");
        minitabRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minitabRadioButtonMenuItemActionPerformed(evt);
            }
        });
        algoMenu.add(minitabRadioButtonMenuItem);

        editjMenu.add(algoMenu);

        animationMenu.setText("Animation Speed");

        veryRadioButtonMenuItem.setText("Very Fast (0 s)");
        veryRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                veryRadioButtonMenuItemActionPerformed(evt);
            }
        });
        animationMenu.add(veryRadioButtonMenuItem);

        fastRadioButtonMenuItem.setText("Fast (0.1 s)");
        fastRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastRadioButtonMenuItemActionPerformed(evt);
            }
        });
        animationMenu.add(fastRadioButtonMenuItem);

        mediumRadioButtonMenuItem.setText("Medium (0.5 s)");
        mediumRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumRadioButtonMenuItemActionPerformed(evt);
            }
        });
        animationMenu.add(mediumRadioButtonMenuItem);

        slowRadioButtonMenuItem.setText("Slow (1 s)");
        animationMenu.add(slowRadioButtonMenuItem);

        editjMenu.add(animationMenu);

        mainMenuBar.add(editjMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(verticalSplitPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                    .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(verticalSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        help.setLocationRelativeTo(this);
        help.setVisible(true);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        about.setLocationRelativeTo(this);
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        clearTables();
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        openData();
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        if(isValidTable()){
            saveData();
        }else{
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs du tableau par des valeurs > 0");
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void balasRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balasRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAlgorithmsMenu();
        balasRadioButtonMenuItem.setSelected(true);
        selectedAlgo = 1;
    }//GEN-LAST:event_balasRadioButtonMenuItemActionPerformed

    private void coinRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coinRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAlgorithmsMenu();
        coinRadioButtonMenuItem.setSelected(true);
        selectedAlgo = 2;
    }//GEN-LAST:event_coinRadioButtonMenuItemActionPerformed

    private void miniliRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miniliRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAlgorithmsMenu();
        miniliRadioButtonMenuItem.setSelected(true);
        selectedAlgo = 3;
    }//GEN-LAST:event_miniliRadioButtonMenuItemActionPerformed

    private void minicoRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minicoRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAlgorithmsMenu();
        minicoRadioButtonMenuItem.setSelected(true);
        selectedAlgo = 4;
    }//GEN-LAST:event_minicoRadioButtonMenuItemActionPerformed

    private void minitabRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minitabRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAlgorithmsMenu();
        minitabRadioButtonMenuItem.setSelected(true);
        selectedAlgo = 5;
    }//GEN-LAST:event_minitabRadioButtonMenuItemActionPerformed

    private void veryRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_veryRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAnimationSpeedMenu();
        veryRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_veryRadioButtonMenuItemActionPerformed

    private void fastRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAnimationSpeedMenu();
        fastRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_fastRadioButtonMenuItemActionPerformed

    private void mediumRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
        unselectAnimationSpeedMenu();
        mediumRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_mediumRadioButtonMenuItemActionPerformed

    private void solutionBaseToogleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solutionBaseToogleBtnActionPerformed
        // TODO add your handling code here:
        unselectToogleButtons();
        if(isValidTable()){
            calculerSolutionBase();
        }else{
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs du tableau par des valeurs > 0");
        }
        
    }//GEN-LAST:event_solutionBaseToogleBtnActionPerformed

    private void steppingStoneToogleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_steppingStoneToogleBtnActionPerformed
        // TODO add your handling code here:
        unselectToogleButtons();
        if(isValidTable()){
            calculerSolutionBase();
            Transport.console="";
            calculerSolutionOptimale();
            printConsole();
        }else{
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs du tableau par des valeurs > 0");
        }
    }//GEN-LAST:event_steppingStoneToogleBtnActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        verticalSplitPane.setDividerLocation(verticalSplitPane.getWidth() - 300);
        horizontalSplitPane.setDividerLocation(horizontalSplitPane.getHeight() - 10);
    }//GEN-LAST:event_formComponentResized

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // TODO add your handling code here:
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
        
        if((Integer)jSpinner1.getValue() < 2)jSpinner1.setValue(2);
        else if((Integer)jSpinner1.getValue() > 100)jSpinner1.setValue(100);
        reloadjTables();
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        // TODO add your handling code here:
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
        
        if((Integer)jSpinner2.getValue() < 2)jSpinner2.setValue(2);
        else if((Integer)jSpinner2.getValue() > 100)jSpinner2.setValue(100);
        reloadjTables();
    }//GEN-LAST:event_jSpinner2StateChanged

    private void previewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewBtnActionPerformed
        // TODO add your handling code here:
        JPopupMenu popup = new JPopupMenu ();
        popup.setLayout (new BorderLayout());        
        JComponent satelliteView = graphScene.createSatelliteView ();
        popup.add (satelliteView, BorderLayout.CENTER);
        popup.show(this.previewBtn, (this.previewBtn.getSize ().width - satelliteView.getPreferredSize ().width) / 2, this.previewBtn.getSize ().height);
    }//GEN-LAST:event_previewBtnActionPerformed

    private void effacerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effacerButtonActionPerformed
        // TODO add your handling code here:
        clearTables();
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
    }//GEN-LAST:event_effacerButtonActionPerformed

    private void algoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algoComboBoxActionPerformed
        // TODO add your handling code here:
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
        
        if(isValidTable()){
            calculerSolutionBase();
        }
    }//GEN-LAST:event_algoComboBoxActionPerformed

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        // TODO add your handling code here:
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
        
        if(isValidTable()){
            calculerSolutionBase();
        }
    }//GEN-LAST:event_jTable1KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    //My Function
    public void reloadjTables(){
        final int row = (int) jSpinner1.getValue();
        final int column = (int) jSpinner2.getValue();
        
        String[] columns1 = new String[column + 2];
        columns1[0] = "";
        for (int i = 1; i < (column + 1); i++){
            columns1[i] = "Y" + i;
        }
        columns1[column + 1] = "Disponibles";
        DefaultTableModel dtm1 = new DefaultTableModel(columns1, row + 1){           

            public Class getColumnClass(int columnIndex) {
                if (columnIndex == 0 ) return java.lang.Object.class;
                return java.lang.Integer.class;
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 0)return false;
                else if(rowIndex == row && columnIndex == (column + 1)){
                    return false;
                }
                return true;
            }
        };
        jTable1.setModel(dtm1);
        
        for (int i = 1; i < (column + 1); i++){
            jTable1.getColumnModel().getColumn(i).setResizable(false);
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(40);
        }        
        
        for (int i = 0; i < row; i++){
            dtm1.setValueAt("X"+(i+1), i, 0);
        }
        dtm1.setValueAt("Besoins", row, 0);
        
        String[] columns2= new String[column + 1];
        columns2[0] = "";
        for (int i = 1; i < (column + 1); i++){
            columns2[i] = "Y" + i;
        }
        
        DefaultTableModel dtm2 = new DefaultTableModel(columns2, row){           

            public Class getColumnClass(int columnIndex) {
                if (columnIndex == 0 ) return java.lang.Object.class;
                return java.lang.Integer.class;
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        for (int i = 0; i < row; i++){
            dtm2.setValueAt("X"+(i+1), i, 0);
        }
        
        DefaultTableModel dtm3 = new DefaultTableModel(columns2, row){           

            public Class getColumnClass(int columnIndex) {
                if (columnIndex == 0 ) return java.lang.Object.class;
                return java.lang.Integer.class;
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        for (int i = 0; i < row; i++){
            dtm3.setValueAt("X"+(i+1), i, 0);
        }
        
        jTable2.setModel(dtm2);
        resultDialog.getResultTable().setModel(dtm3);
        for (int i = 1; i < (column + 1); i++){
            jTable2.getColumnModel().getColumn(i).setResizable(false);
            jTable2.getColumnModel().getColumn(i).setPreferredWidth(40);
            resultDialog.getResultTable().getColumnModel().getColumn(i).setResizable(false);
            resultDialog.getResultTable().getColumnModel().getColumn(i).setPreferredWidth(40);
        }
    }
    
    public void calculerSolutionBase(){
        selectedAlgo = algoComboBox.getSelectedIndex();
        switch(selectedAlgo){
            case 0:
                solutionBalasHammer();
                break;
            case 1:
                solutionCoinNordOuest();
                break;
            case 2:
                solutionMinili();
                break;
            case 3:
                solutionMinico();
                break;
            case 4:
                solutionMinitab();
                break;
        }
    }
    
    public void calculerSolutionOptimale(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        int tab1[][] = new int[row+1][column+1];
        int t[][] = new int[row+1][column+1];
        int tab2[][] = new int[row+1][column+1];
        
        for (int i=0; i <= row; i++){
            for(int j=0; j <= column; j++){
                if(i == row && j == column){
                    tab1[i][j] = -1;
                }else{
                    tab1[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                }
            }
        }
        
//        for (int i=0; i <= row; i++){
//            for(int j=0; j <= column; j++){
//                if(i==row || j==column){
//                    tab2[i][j] = 0;
//                }else{
//                    tab2[i][j] = (int) jTable2.getModel().getValueAt(i, j+1);
//                }
//            }
//        }
        
        
        for(int i = 0; i <= row ; i++){
            t[i] = tab1[i].clone();
        }

        selectedAlgo = algoComboBox.getSelectedIndex();
        switch(selectedAlgo){
            case 0:
                tab2 = Transport.BalasHammer(tab1, row+1, column+1);
                break;
            case 1:
                tab2 = Transport.CoinNordWest(tab1, row+1, column+1);
                break;
            case 2:
                tab2 = Transport.MinLine(tab1, row+1, column+1);
                break;
            case 3:
                tab2 = Transport.MinCol(tab1, row+1, column+1);
                break;
            case 4:
                tab2 = Transport.MinTab(tab1, row+1, column+1);
                break;
        }
        
        
        int result[][] = Transport.SteppingStone(t, tab2, row+1, column+1);
                
        for (int i=0; i < row; i++){
            for(int j=0; j < column; j++){
               if(result[i][j] == -1) {
                    resultDialog.getResultTable().getModel().setValueAt("0", i, j+1);
                }else{
                    resultDialog.getResultTable().getModel().setValueAt(result[i][j], i, j+1);
                }
            }
        }
        
        genererGrapheSolutionOptimale(result, row, column);
        
        resultDialog.getResultLabel().setText(Transport.z(t, result, row, column) + "");
        resultDialog.setLocationRelativeTo(this);
        resultDialog.setVisible(true);
        
    }
    
    
    private void genererGrapheSolutionOptimale(int[][] result, int row, int column) {
        Widget xNode[] = new Widget[row];
        Widget yNode[] = new Widget[column];
        int position=-50;
        
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        
        for (int i=1; i <= row; i++){
            xNode[i-1] = graphScene.addNode(String.valueOf("X"+i));
            //xNode[i-1].setPreferredLocation(new Point (10, position = position+100));
            graphScene.getSceneAnimator().animatePreferredLocation(xNode[i-1], new Point (10, position = position+100));
        }
        position = -50;
        for(int j=1; j <= column; j++){
            yNode[j-1] = graphScene.addNode(String.valueOf("Y"+j));
            //yNode[j-1].setPreferredLocation(new Point (200, position = position+100));
            graphScene.getSceneAnimator().animatePreferredLocation(yNode[j-1], new Point (200, position = position+100));
        }
        
        for (int i=0; i< row; i++){
            for(int j=0; j< column; j++){
                if(result[i][j] != 0){     
                    String edge = (i+1)+":"+(j+1)+":"+String.valueOf(result[i][j]);
                    graphScene.addEdge(edge);
                    graphScene.setEdgeSource(edge,String.valueOf("X"+(i+1)));
                    graphScene.setEdgeTarget(edge,String.valueOf("Y"+(j+1)));
                }
            }
        }        
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        
    }
  
    public void printConsole(){
        consolTextArea.setText(Transport.console);
    }
    
    public boolean isValidTable(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();        
        for(int i = 0; i <= row; i++){
            for (int j=1; j <= (column + 1); j++){
                if(i == row && j == (column + 1)){
                    return true;
                }else if (jTable1.getValueAt(i, j) == null || (int)jTable1.getValueAt(i, j) <= 0){
                    return false;
                };
            }
        }
        return true;
    }
    
    public void unselectToogleButtons(){
        solutionBaseToogleBtn.setSelected(false);
        steppingStoneToogleBtn.setSelected(false);
    }
    
    public void unselectAlgorithmsMenu(){
        balasRadioButtonMenuItem.setSelected(false);
        coinRadioButtonMenuItem.setSelected(false);
        miniliRadioButtonMenuItem.setSelected(false);
        minicoRadioButtonMenuItem.setSelected(false);
        minitabRadioButtonMenuItem.setSelected(false);
    }
    
    public void unselectAnimationSpeedMenu(){
        veryRadioButtonMenuItem.setSelected(false);
        fastRadioButtonMenuItem.setSelected(false);
        mediumRadioButtonMenuItem.setSelected(false);
        slowRadioButtonMenuItem.setSelected(false);
    }
    
    public void clearTables(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        for (int i=0; i<=row; i++){
            for(int j=1; j <= (column + 1); j++){
                jTable1.getModel().setValueAt(null, i, j);
            }
        }
        
        for (int i=0; i<row; i++){
            for(int j=1; j <= column; j++){
                jTable2.getModel().setValueAt(null, i, j);
            }
        }
    }
    
    
    public void solutionBalasHammer(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        int t[][] = new int[row+1][column+1];
        
        for (int i=0; i<=row; i++){
            for(int j=0; j <= column; j++){
                if(i==row &&  j==column){
                    t[i][j] = -1;
                }else{
                    t[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                }
            }
        }
        
        int [][] result = Transport.BalasHammer(t, row+1, column+1);
        
        for (int i=0; i<row; i++){
            for(int j=0; j < column; j++){
                jTable2.getModel().setValueAt(result[i][j], i, j+1);
            }
        }
        
    }
    
    public void solutionCoinNordOuest(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        int t[][] = new int[row+1][column+1];
        
        for (int i=0; i<=row; i++){
            for(int j=0; j <= column; j++){
                if(i==row &&  j==column){
                    t[i][j] = -1;
                }else{
                    t[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                }
            }
        }
        
        int [][] result = Transport.CoinNordWest(t, row+1, column+1);
        
        for (int i=0; i<row; i++){
            for(int j=0; j < column; j++){
                jTable2.getModel().setValueAt(result[i][j], i, j+1);
            }
        }
    }
    
    public void solutionMinili(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        int t[][] = new int[row+1][column+1];
        
        for (int i=0; i<=row; i++){
            for(int j=0; j <= column; j++){
                if(i==row &&  j==column){
                    t[i][j] = -1;
                }else{
                    t[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                }
            }
        }
        
        int [][] result = Transport.MinLine(t, row+1, column+1);
        
        for (int i=0; i<row; i++){
            for(int j=0; j < column; j++){
                jTable2.getModel().setValueAt(result[i][j], i, j+1);
            }
        }
    }
    
    public void solutionMinico(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        int t[][] = new int[row+1][column+1];
        
        for (int i=0; i<=row; i++){
            for(int j=0; j <= column; j++){
                if(i==row &&  j==column){
                    t[i][j] = -1;
                }else{
                    t[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                }
            }
        }
        
        int [][] result = Transport.MinCol(t, row+1, column+1);
        
        for (int i=0; i<row; i++){
            for(int j=0; j < column; j++){
                jTable2.getModel().setValueAt(result[i][j], i, j+1);
            }
        }
    }
    
    public void solutionMinitab(){
        int row = (int) jSpinner1.getValue();
        int column = (int) jSpinner2.getValue();
        
        int t[][] = new int[row+1][column+1];
        
        for (int i=0; i<=row; i++){
            for(int j=0; j <= column; j++){
                if(i==row &&  j==column){
                    t[i][j] = -1;
                }else{
                    t[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                }
            }
        }
        
        int [][] result = Transport.MinTab(t, row+1, column+1);
        
        for (int i=0; i<row; i++){
            for(int j=0; j < column; j++){
                jTable2.getModel().setValueAt(result[i][j], i, j+1);
            }
        }
    }
    
    public void openData(){
        BufferedReader in = null;			// fichier
        String curLigne = null;	
        int numLigne = 0;
        int numColonne  = 0;
        int [][]tab = new int[100][100];
        String [] tabLigne;
        
        chooser.setMultiSelectionEnabled(false);
        int value = chooser.showOpenDialog(this);
        if (value != JFileChooser.APPROVE_OPTION)
                return;
        
        try {
            File selected = chooser.getSelectedFile();
            try {
                    // on ouvre le fichier
                    in = new BufferedReader(new FileReader(selected));                      
                    // On r√©cup√®re toutes les lignes
                    while ( (curLigne = in.readLine()) != null) {
                        tabLigne = curLigne.split("\t");
                        for(numColonne=0; numColonne< tabLigne.length; numColonne++){
                            tab[numLigne][numColonne] = Integer.valueOf(tabLigne[numColonne]);
                            Integer.valueOf(tabLigne[numColonne]);
                        }
                        numLigne++;
                    }
                    chargerTableau(tab, numLigne,numColonne);

            // Detection d'erreurs
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            } finally {
                try {
                    in.close();
                } catch (Exception e) { /* vide */ }
            }
        } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    public void saveData(){
        chooser.setMultiSelectionEnabled(false);
        int value = chooser.showSaveDialog(this);
        if (value != JFileChooser.APPROVE_OPTION)
                return;

        try {
                File selected = chooser.getSelectedFile(); 
                BufferedWriter out=new BufferedWriter(new FileWriter(selected));
                int row = (int) jSpinner1.getValue();
                int column = (int) jSpinner2.getValue();

                int t[][] = new int[row+1][column+1];

                for (int i=0; i<=row; i++){
                    for(int j=0; j <= column; j++){
                        if(i==row &&  j==column){
                            t[i][j] = -1;
                        }else{
                            t[i][j] = (int) jTable1.getModel().getValueAt(i, j+1);
                        }
                    }
                }
                
                for(int i=0; i<=row; i++){
                    for(int j=0; j<=column; j++){
                        out.append(String.valueOf(t[i][j]) + "\t");
                    }
                    out.newLine();
                }
                
                out.close();
        } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    public void chargerTableau(int[][] tab,int row, int column) {
        graphScene = new MyGraphScene();
        graphView = graphScene.createView();
        graphScrollPane.setViewportView(graphView);
        Transport.console="";
        printConsole();
        
        jSpinner1.setValue(row-1);
        jSpinner2.setValue(column-1);
        reloadjTables();
        
        for (int i=0; i<row; i++){
            for(int j=0; j < column; j++){
                if(i == (row-1) && j==(column-1)){
                    
                }else{
                    jTable1.getModel().setValueAt(tab[i][j], i, j+1);
                }
            }
        }
    }
    
    // My Variables
    private int selectedAlgo = 0;
    private AboutDialog about;
    private HelpDialog help;
    private AlgoDialog algo; 
    private ResultDialog  resultDialog;
    private JFileChooser chooser;
    private Graphe graphe;
    private MyGraphScene graphScene;
    private JComponent graphView;
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox algoComboBox;
    private javax.swing.JLabel algoLabel;
    private javax.swing.JMenu algoMenu;
    private javax.swing.JMenu animationMenu;
    private javax.swing.JRadioButtonMenuItem balasRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem coinRadioButtonMenuItem;
    private javax.swing.JScrollPane consolScrollPane;
    private javax.swing.JTextArea consolTextArea;
    private javax.swing.JMenu editjMenu;
    private javax.swing.JButton effacerButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JRadioButtonMenuItem fastRadioButtonMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileSeparator;
    private javax.swing.JScrollPane graphScrollPane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JSplitPane horizontalSplitPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JRadioButtonMenuItem mediumRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem minicoRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem miniliRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem minitabRadioButtonMenuItem;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton previewBtn;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JRadioButtonMenuItem slowRadioButtonMenuItem;
    private javax.swing.JToggleButton solutionBaseToogleBtn;
    private javax.swing.JToggleButton steppingStoneToogleBtn;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JSplitPane verticalSplitPane;
    private javax.swing.JRadioButtonMenuItem veryRadioButtonMenuItem;
    // End of variables declaration//GEN-END:variables


}
